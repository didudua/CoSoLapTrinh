{
    "sourceFile": "Chuong5/BT_NHOM/Bai123.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1682237923454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1682237949002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n operators = []\r\n postfix = []\r\n \r\n # Define the infix expression\r\n-infix_expression = \"3 + 4\"\r\n+infix_expression = input()\r\n \r\n # Split the infix expression into tokens\r\n tokens = infix_expression.split()\r\n \r\n"
                },
                {
                    "date": 1682238027919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,32 @@\n-# Define a function that returns the precedence of an operator\r\n def precedence(operator):\r\n     if operator == '*' or operator == '/':\r\n         return 2\r\n     elif operator == '+' or operator == '-':\r\n         return 1\r\n     else:\r\n         return 0\r\n-\r\n-# Initialize empty lists\r\n+    \r\n operators = []\r\n postfix = []\r\n \r\n-# Define the infix expression\r\n infix_expression = input()\r\n \r\n-# Split the infix expression into tokens\r\n tokens = infix_expression.split()\r\n \r\n-# Loop through each token in the infix expression\r\n for token in tokens:\r\n-    if token.isnumeric(): # If the token is an integer\r\n-        postfix.append(token) # Add the token to the end of postfix\r\n-    elif token in ['+', '-', '*', '/']: # If the token is an operator\r\n+    if token.isnumeric(): \r\n+        postfix.append(token) \r\n+    elif token in ['+', '-', '*', '/']: \r\n         while operators and operators[-1] != '(' and precedence(token) <= precedence(operators[-1]):\r\n-            # While operators is not empty and the last item in operators is not an open parenthesis\r\n-            # and precedence(token) <= precedence(last item in operators)\r\n-            postfix.append(operators.pop()) # Remove the last item from operators and add it to postfix\r\n-        operators.append(token) # Add token to the end of operators\r\n-    elif token == '(': # If the token is an open parenthesis\r\n-        operators.append(token) # Add token to the end of operators\r\n-    elif token == ')': # If the token is a close parenthesis\r\n-        while operators[-1] != '(': # While the last item in operators is not an open parenthesis\r\n-            postfix.append(operators.pop()) # Remove the last item from operators and add it to postfix\r\n-        operators.pop() # Remove the open parenthesis from operators\r\n-while operators: # While operators is not the empty list\r\n-    postfix.append(operators.pop()) # Remove the last item from operators and add it to postfix\r\n+            postfix.append(operators.pop()) \r\n+        operators.append(token) \r\n+    elif token == '(': \r\n+        operators.append(token) \r\n+    elif token == ')': \r\n+        while operators[-1] != '(': \r\n+            postfix.append(operators.pop()) \r\n+        operators.pop() \r\n+while operators: \r\n+    postfix.append(operators.pop()) \r\n \r\n-# Return postfix as the result of the algorithm\r\n-print(postfix) # Output: ['3', '4', '2', '*', '1', '5', '-', '/', '+']\r\n+print(postfix) \n\\ No newline at end of file\n"
                },
                {
                    "date": 1682238569071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,30 @@\n-def precedence(operator):\r\n-    if operator == '*' or operator == '/':\r\n+def phancap(dau):\r\n+    if dau == '*' or dau == '/':\r\n         return 2\r\n-    elif operator == '+' or operator == '-':\r\n+    elif dau == '+' or dau == '-':\r\n         return 1\r\n     else:\r\n         return 0\r\n     \r\n-operators = []\r\n-postfix = []\r\n-\r\n-infix_expression = input()\r\n-\r\n-tokens = infix_expression.split()\r\n-\r\n-for token in tokens:\r\n-    if token.isnumeric(): \r\n-        postfix.append(token) \r\n-    elif token in ['+', '-', '*', '/']: \r\n-        while operators and operators[-1] != '(' and precedence(token) <= precedence(operators[-1]):\r\n-            postfix.append(operators.pop()) \r\n-        operators.append(token) \r\n-    elif token == '(': \r\n-        operators.append(token) \r\n-    elif token == ')': \r\n-        while operators[-1] != '(': \r\n-            postfix.append(operators.pop()) \r\n-        operators.pop() \r\n-while operators: \r\n\\ No newline at end of file\n-    postfix.append(operators.pop()) \r\n-\r\n-print(postfix) \n+def run(nhap):\r\n+    LNhap = nhap.split()\r\n+    LDau = []\r\n+    KQ = []\r\n+    for i in LNhap:\r\n+        if i.isnumeric(): \r\n+            KQ.append(i) \r\n+        elif i in ['+', '-', '*', '/']: \r\n+            while LDau and LDau[-1] != '(' and phancap(i) <= phancap(LDau[-1]):\r\n+                KQ.append(LDau.pop()) \r\n+            LDau.append(i) \r\n+        elif i == '(': \r\n+            LDau.append(i) \r\n+        elif i == ')': \r\n+            while LDau[-1] != '(': \r\n+                KQ.append(LDau.pop()) \r\n+            LDau.pop() \r\n+    while LDau: \r\n+        KQ.append(LDau.pop()) \r\n+    return KQ\r\n+nhap = input()\r\n+print(run(nhap)) \n\\ No newline at end of file\n"
                },
                {
                    "date": 1682238633149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,7 +24,7 @@\n                 KQ.append(LDau.pop()) \r\n             LDau.pop() \r\n     while LDau: \r\n         KQ.append(LDau.pop()) \r\n-    return KQ\r\n+    return ''.join(KQ)\r\n nhap = input()\r\n print(run(nhap)) \n\\ No newline at end of file\n"
                },
                {
                    "date": 1682238643731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,7 +24,7 @@\n                 KQ.append(LDau.pop()) \r\n             LDau.pop() \r\n     while LDau: \r\n         KQ.append(LDau.pop()) \r\n-    return ''.join(KQ)\r\n+    return ' '.join(KQ)\r\n nhap = input()\r\n print(run(nhap)) \n\\ No newline at end of file\n"
                },
                {
                    "date": 1682238731398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     for i in LNhap:\r\n         if i.isnumeric(): \r\n             KQ.append(i) \r\n         elif i in ['+', '-', '*', '/']: \r\n-            while LDau and LDau[-1] != '(' and phancap(i) <= phancap(LDau[-1]):\r\n+            while LDau!='' and LDau[-1] != '(' and phancap(i) <= phancap(LDau[-1]):\r\n                 KQ.append(LDau.pop()) \r\n             LDau.append(i) \r\n         elif i == '(': \r\n             LDau.append(i) \r\n@@ -25,6 +25,7 @@\n             LDau.pop() \r\n     while LDau: \r\n         KQ.append(LDau.pop()) \r\n     return ' '.join(KQ)\r\n+\r\n nhap = input()\r\n print(run(nhap)) \n\\ No newline at end of file\n"
                },
                {
                    "date": 1682238747538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     for i in LNhap:\r\n         if i.isnumeric(): \r\n             KQ.append(i) \r\n         elif i in ['+', '-', '*', '/']: \r\n-            while LDau!='' and LDau[-1] != '(' and phancap(i) <= phancap(LDau[-1]):\r\n+            while LDau and LDau[-1] != '(' and phancap(i) <= phancap(LDau[-1]):\r\n                 KQ.append(LDau.pop()) \r\n             LDau.append(i) \r\n         elif i == '(': \r\n             LDau.append(i) \r\n"
                }
            ],
            "date": 1682237923454,
            "name": "Commit-0",
            "content": "# Define a function that returns the precedence of an operator\r\ndef precedence(operator):\r\n    if operator == '*' or operator == '/':\r\n        return 2\r\n    elif operator == '+' or operator == '-':\r\n        return 1\r\n    else:\r\n        return 0\r\n\r\n# Initialize empty lists\r\noperators = []\r\npostfix = []\r\n\r\n# Define the infix expression\r\ninfix_expression = \"3 + 4\"\r\n\r\n# Split the infix expression into tokens\r\ntokens = infix_expression.split()\r\n\r\n# Loop through each token in the infix expression\r\nfor token in tokens:\r\n    if token.isnumeric(): # If the token is an integer\r\n        postfix.append(token) # Add the token to the end of postfix\r\n    elif token in ['+', '-', '*', '/']: # If the token is an operator\r\n        while operators and operators[-1] != '(' and precedence(token) <= precedence(operators[-1]):\r\n            # While operators is not empty and the last item in operators is not an open parenthesis\r\n            # and precedence(token) <= precedence(last item in operators)\r\n            postfix.append(operators.pop()) # Remove the last item from operators and add it to postfix\r\n        operators.append(token) # Add token to the end of operators\r\n    elif token == '(': # If the token is an open parenthesis\r\n        operators.append(token) # Add token to the end of operators\r\n    elif token == ')': # If the token is a close parenthesis\r\n        while operators[-1] != '(': # While the last item in operators is not an open parenthesis\r\n            postfix.append(operators.pop()) # Remove the last item from operators and add it to postfix\r\n        operators.pop() # Remove the open parenthesis from operators\r\nwhile operators: # While operators is not the empty list\r\n    postfix.append(operators.pop()) # Remove the last item from operators and add it to postfix\r\n\r\n# Return postfix as the result of the algorithm\r\nprint(postfix) # Output: ['3', '4', '2', '*', '1', '5', '-', '/', '+']\r\n"
        }
    ]
}